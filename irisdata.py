# -*- coding: utf-8 -*-
"""irisdata

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eCRG84ZmXmjMoTTX-V-VMEj6R3AnrR66
"""

url="https://gist.githubusercontent.com/curran/a08a1080b88344b0c8a7/raw/0e7a9b0a5d22642a06d3d5b9bcbad9890c8ee534/iris.csv"

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv(url)
df

df.columns

df.describe()

df.info()

df['species'].value_counts()

df.isnull().sum()

plt.subplot(2,2,1)
plt.hist(df['sepal_length'])
plt.title("sepal_length")
plt.grid(True)


plt.subplot(2,2,2)
plt.hist(df['sepal_width'])
plt.title("sepal_width")
plt.grid(True)


plt.subplot(2,2,3)
plt.hist(df['petal_length'])
plt.title('petal_length')
plt.grid('True')


plt.subplot(2,2,4)
plt.hist(df['petal_width'])
plt.title('petal_width')
plt.grid(True)


plt.show()

color=['blue','orange','red']
sp=['virginica','setosa','versicolor']
for i in range(3):
  x=df[df['species']==sp[i]]['sepal_length']
  y=df[df['species']==sp[i]]['sepal_width']
  plt.scatter(x,y,c=color[i],label=sp[i])
plt.xlabel('sepal_lenght')
plt.ylabel('sepal_width')
plt.legend()
plt.show()

color=['blue','orange','red']
sp=['virginica','setosa','versicolor']
for i in range(3):
  x=df[df['species']==sp[i]]['petal_length']
  y=df[df['species']==sp[i]]['petal_width']
  plt.scatter(x,y,c=color[i],label=sp[i])
plt.xlabel('petal_lenght')
plt.ylabel('petal_width')
plt.legend()
plt.show()

df.corr()

fig,ax=plt.subplots(figsize=(5,4))
sns.heatmap(df.corr(),annot=True,ax=ax)

from sklearn.preprocessing import LabelEncoder as le
df['species']=le().fit_transform(df['species'])
df.head()

from sklearn.model_selection import train_test_split
X=df.iloc[:,0:4]
Y=df.iloc[:,4]
x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.1)

from sklearn.linear_model import LogisticRegression
model=LogisticRegression(max_iter=100)

model.fit(x_train,y_train)

acc=model.score(x_test,y_test)
print("accuracy of logistic Regression: ",acc)

from sklearn.neighbors import KNeighborsClassifier
model1=KNeighborsClassifier()
model1.fit(x_train,y_train)
acc1=model1.score(x_test,y_test)
print("accuracy of KNN: ",acc1)

from sklearn.tree import DecisionTreeClassifier
model2=DecisionTreeClassifier()
model2.fit(x_train,y_train)
acc2=model2.score(x_test,y_test)
print("Accuracy of  DTC: ", acc2)

prediction={"y_test":list(y_test),"model":list(model.predict(x_test)),"model1":list(model1.predict(x_test)),
            "model2":list(model2.predict(x_test))}
frame=pd.DataFrame(prediction)
frame





